import sqlite3
import os
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode, InputFile
from typing import Union
from typing import List

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã
from aiogram.utils import executor



conn = sqlite3.connect('menu.db')
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS menu (
        id INTEGER PRIMARY KEY,
        item_name TEXT,
        description TEXT,
        price INTEGER,
        photo TEXT
    )
''')
conn.commit()

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
cursor.execute('''INSERT OR IGNORE INTO menu (id, item_name, description, price, photo) 
                VALUES (1, '–†–æ–º–∞–Ω–∑–∞','–°–æ—Ä—Ç "–†–æ–º–∞–Ω–∑–∞" - –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Å–ª–∞–¥–æ—Å—Ç–∏ –∏ —Å–≤–µ–∂–µ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–≥–æ —Å–µ–≥–æ–¥–Ω—è –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º –≤–∫—É—Å–æ–º –ª–µ—Ç–∞!', 10, 'photos/romanza.jpg')''')
cursor.execute('''INSERT OR IGNORE INTO menu (id, item_name, description, price, photo) 
                VALUES (2, '–¢–æ–ø –ì–∞–Ω', '–°–æ—Ä—Ç "–¢–æ–ø –ì–∞–Ω" - –∞—Ä–±—É–∑, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Å—Ç–∞–≤–∏—Ç –≤–∞—Å –≤–ª—é–±–∏—Ç—å—Å—è –≤ –Ω–µ–≥–æ —Å –ø–µ—Ä–≤–æ–≥–æ –∫—É—Å–æ—á–∫–∞. –≠—Ç–æ –∏–¥–µ–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏—â–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ –≤–∫—É—Å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç.', 5, 'photos/top_gan.jpg')''')
cursor.execute('''INSERT OR IGNORE INTO menu (id, item_name, description, price, photo)
                VALUES (3, '–°–µ–º–µ–Ω–∞ f2', '–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—Å–∞—Ç—å', 3, 'photos/–ü–æ–ª–µ.jpg')''')
conn.commit()
conn.close()

# –ó–∞–¥–∞–µ–º API —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞
bot = Bot(token='5838405583:AAFWTbm4tDF0y9r4XV5pnJ5POkJrN-leP1I')

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Dispatcher –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class Order(StatesGroup):
    item_name = State()
    quantity = State()
    confirmation = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏ –æ –Ω–∞—Å
    keyboard_markup = InlineKeyboardMarkup(row_width=2)
    menu_button = InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu')
    about_button = InlineKeyboardButton('–û –Ω–∞—Å', callback_data='about')
    keyboard_markup.add(menu_button, about_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∫–Ω–æ–ø–∫–∏
    # await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω!", reply_markup=keyboard_markup)
    tx_1 = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ó–∞–±–∏—Ä–∞–π –ª—é–±–∏–º—ã–µ –≤–∫—É—Å–Ω—è—à–∫–∏ üçâ –ø–æ –í–´–ì–û–î–ù–û–ô —Ü–µ–Ω–µ –∏ –≤ –û—Ç–ª–∏—á–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ!"
    photo = open('photos/–≠–º–±–ª–µ–º–∞ –ö–§–•.jpg', 'rb')
    await bot.send_photo(message.chat.id, photo=photo, caption=tx_1, reply_markup=keyboard_markup)



# @dp.callback_query_handler(text='menu')
# async def process_menu_callback(callback_query: types.CallbackQuery):
#     # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
#     await bot.answer_callback_query(callback_query.id)
#     await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
#
#     # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#     with sqlite3.connect('menu.db') as conn:
#         cursor = conn.cursor()
#
#     # –í—ã—á–∏—Å–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è offset –∏ limit –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
#     page_size = 1
#     page_number = 0
#     if 'page_number' in callback_query.data:
#         page_number = int(callback_query.data.split('_')[2]) + 1
#     elif 'prev' in callback_query.data:
#         page_number = int(callback_query.data.split('_')[2]) - 1
#     elif 'next' in callback_query.data:
#         page_number = int(callback_query.data.split('_')[2]) + 1
#     offset = page_size * page_number
#     limit = page_size
#
#     cursor.execute(f'SELECT * FROM menu LIMIT {limit} OFFSET {offset}')
#     item = cursor.fetchone()
#     conn.close()
#
#     # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
#     message_text = f'{item[1]}\n{item[2]}\n{item[3]} —Ä—É–±.\n\n'
#     keyboard_markup = InlineKeyboardMarkup()
#     add_to_cart_button = InlineKeyboardButton('–í –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'add_to_cart_{item[0]}')
#     prev_button = InlineKeyboardButton('‚Æ®', callback_data=f'menu_prev_{page_number}')
#     next_button = InlineKeyboardButton('‚Æ©', callback_data=f'menu_next_{page_number}')
#     keyboard_markup.row(prev_button, add_to_cart_button, next_button)
#     await bot.send_photo(callback_query.message.chat.id, photo=InputFile(item[4]), caption=message_text,
#                          reply_markup=keyboard_markup)
#
#     # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –∏ "–≤–ø–µ—Ä–µ–¥"
#     keyboard_markup = InlineKeyboardMarkup()
#     if page_number > 0:
#         prev_button = InlineKeyboardButton('‚Æ®', callback_data=f'menu_prev_{page_number}')
#         keyboard_markup.add(prev_button)
#     if cursor.fetchone() is not None:
#         next_button = InlineKeyboardButton('‚Æ©', callback_data=f'menu_next_{page_number}')
#         keyboard_markup.add(next_button)
#
#     await bot.send_message(callback_query.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä', reply_markup=keyboard_markup)

@dp.callback_query_handler(text='menu')
async def process_menu_callback(callback_query: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await bot.answer_callback_query(callback_query.id)
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await bot.send_message(callback_query.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä')

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with sqlite3.connect('menu.db') as conn:
        cursor = conn.cursor()

        logging.basicConfig(filename='app.log', level=logging.DEBUG, format='%(asctime)s %(levelname)s %(message)s')

        def button_click_handler():
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('SELECT * FROM menu')
            items = cursor.fetchall()

            # –í—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω
            for item in items:
                print(item)

            # –ó–∞–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ –≤ –ª–æ–≥-—Ñ–∞–π–ª
            logging.debug('Executed query: SELECT * FROM menu')


        # –í—ã—á–∏—Å–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è offset –∏ limit –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_size = 1
        page_number = 0
        if 'page_number' in callback_query.data:
            page_number = int(callback_query.data.split('_')[2])
        elif 'prev' in callback_query.data:
            page_number = int(callback_query.data.split('_')[2]) - 1
        elif 'next' in callback_query.data:
            page_number = int(callback_query.data.split('_')[2]) + 1
        offset = page_size * page_number
        limit = page_size

        cursor.execute(f'SELECT * FROM menu ORDER BY id LIMIT {limit} OFFSET {offset}')
        items = cursor.fetchall()

        for item in items:
            print(item)

    conn.close()

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    item = items[0]
    message_text = f'{item[1]}\n{item[2]}\n{item[3]} —Ä—É–±.\n\n'
    keyboard_markup = InlineKeyboardMarkup()
    add_to_cart_button = InlineKeyboardButton('–í –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'add_to_cart_{item[0]}')
    prev_button = InlineKeyboardButton('‚Æ®', callback_data=f'menu_prev_{page_number}')
    next_button = InlineKeyboardButton('‚Æ©', callback_data=f'menu_next_{page_number}')
    keyboard_markup.row(prev_button, add_to_cart_button, next_button)
    await bot.send_photo(callback_query.message.chat.id, photo=InputFile(item[4]), caption=message_text,
                         reply_markup=keyboard_markup)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –∏ "–≤–ø–µ—Ä–µ–¥"
    keyboard_markup = InlineKeyboardMarkup()
    if page_number > 0:
        prev_button = InlineKeyboardButton('‚Æ®', callback_data=f'menu_prev_{page_number - 1}')
        keyboard_markup.add(prev_button)
    if len(items) > 1:
        next_button = InlineKeyboardButton('‚Æ©', callback_data=f'menu_next_{page_number + 1}')
        keyboard_markup.add(next_button)
    await bot.send_message(callback_query.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä', reply_markup=keyboard_markup)

    # await bot.send_message(callback_query.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä', reply_markup=keyboard_markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û –Ω–∞—Å"
@dp.callback_query_handler(text='about')
async def process_about_callback(callback_query: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await bot.answer_callback_query(callback_query.id)
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç –æ –Ω–∞—Å –∏–∑ –ø–∞–ø–∫–∏ photos
    photo_path = os.path.join(os.getcwd(), 'photos', '–ö–§–•_—Å–µ–º—å—è.jpg')
    message_text = '–ö–§–• "–ö—Ä–∞—Å–Ω—ã–π –ë–æ—Ä–æ–∫" –±—ã–ª–æ –æ—Å–Ω–æ–≤–∞–Ω–æ –≤ 2017 –≥–æ–¥—É –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–∏ –∞—Ä–±—É–∑–∞. –ú—ã –≥–æ—Ä–¥–∏–º—Å—è —Ç–µ–º, —á—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–¥–Ω–∏ –∏–∑ –ª—É—á—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –ë–µ–ª–∞—Ä—É—Å–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ç—â–∞—Ç–µ–ª—å–Ω–æ–º—É –æ—Ç–±–æ—Ä—É —Å–æ—Ä—Ç–æ–≤ –∏ —Å—Ç—Ä–æ–≥–æ–º—É –∫–æ–Ω—Ç—Ä–æ–ª—é –∫–∞—á–µ—Å—Ç–≤–∞. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π —Å–µ—Ä–≤–∏—Å.'
    await bot.send_photo(callback_query.message.chat.id, photo=InputFile(photo_path), caption=message_text)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í –∫–æ—Ä–∑–∏–Ω—É"
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('add_to_cart_'))
async def process_add_to_cart_callback(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    item_id = int(callback_query.data.split('_')[-1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(item_id=item_id)

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    message_text = '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:'
    await bot.send_message(callback_query.message.chat.id, message_text)
    await Order.quantity.set()
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=Order.quantity)
async def process_quantity_command(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    item_id = data['item_id']
    quantity = int(message.text)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('menu.db')
    cursor = conn.cursor()
    cursor.execute(f'SELECT * FROM menu WHERE id={item_id}')
    item = cursor.fetchone()
    conn.close()

    # –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
    price = item[3] * quantity

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(item_name=item[1], quantity=quantity, price=price)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    message_text = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{item[1]}</b> –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity} —à—Ç.\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.'
    keyboard_markup = InlineKeyboardMarkup()
    confirm_button = InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm')
    cancel_button = InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
    keyboard_markup.add(confirm_button, cancel_button)
    await message.reply(message_text, reply_markup=keyboard_markup, parse_mode=ParseMode.HTML)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    await Order.confirmation.set()
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
@dp.callback_query_handler(lambda callback_query: callback_query.data in ['confirm', 'cancel'], state=Order.confirmation)
async def process_confirmation_callback(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    item_name = data['item_name']
    quantity = data['quantity']
    price = data['price']

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–∫–∞–∑
    if callback_query.data == 'confirm':
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('orders.db')
            cursor = conn.cursor()
            cursor.execute(f"INSERT INTO orders VALUES (NULL, '{item_name}', {quantity}, {price})")
            conn.commit()
            conn.close()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
            message_text = f'–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ <b>{item_name}</b> –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity} —à—Ç. –Ω–∞ —Å—É–º–º—É {price} —Ä—É–±. –ø—Ä–∏–Ω—è—Ç!'
            await bot.send_message(callback_query.message.chat.id, message_text, parse_mode=ParseMode.HTML)
        except Exception as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}'
            await bot.send_message(callback_query.message.chat.id, error_message)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–º–µ–Ω–æ–π –∑–∞–∫–∞–∑–∞
        message_text = '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω!'
        await bot.send_message(callback_query.message.chat.id, message_text)

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
@dp.message_handler(commands=['menu'])
async def process_menu_command(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    # conn = sqlite3.connect('menu.db')
    # cursor = conn.cursor()
    # cursor.execute('SELECT * FROM menu')
    # items = cursor.fetchall()
    # conn.close()

    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM my_table')
    row = cursor.fetchone()
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    cursor.close()
    conn.close()

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    keyboard_markup = InlineKeyboardMarkup(row_width=2)
    for item in items:
        item_button = InlineKeyboardButton(item[1], callback_data=f'show_item_{item[0]}')
        add_to_cart_button = InlineKeyboardButton('–í –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'add_to_cart_{item[0]}')
        keyboard_markup.add(item_button, add_to_cart_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
    message_text = '–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:'
    await message.reply(message_text, reply_markup=keyboard_markup)
@dp.message_handler(commands=['orders'])
async def process_orders_command(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('orders.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM orders')
    orders = cursor.fetchall()
    conn.close()

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
    if orders:
        message_text = '–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:\n\n'
        for order in orders:
            message_text += f'- {order[1]} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {order[2]} —à—Ç. –Ω–∞ —Å—É–º–º—É {order[3]} —Ä—É–±.\n'
    else:
        message_text = '–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç.'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
    await message.reply(message_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler()
async def process_unknown_command(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    message_text = '–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n/menu - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞\n/orders - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤\n/about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å'
    await message.reply(message_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
# @dp.errors_handler()
# async def process_errors(update: types.Update, exception: Exception):
#     # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
#     logger.error(f'Update {update} caused error {exception}')
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#     message_text = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
#     await update.message.answer(message_text)

@dp.errors_handler()
async def process_errors(update: types.Update, exception: Exception):
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    logger.error(f'Update {update} caused error {exception}')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if update.message is not None:
        message_text = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        await update.message.answer(message_text)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)