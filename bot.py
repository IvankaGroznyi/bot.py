
from datetime import datetime
import io
import sqlite3
import os
from venv import logger
from PIL import Image
from aiogram import types
from aiogram import Bot, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, callback_query, Update
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from telegram.ext import CallbackContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode, InputFile
from typing import Union
from typing import List
import shortuuid

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã
from aiogram.utils import executor

conn = sqlite3.connect('menu.db')
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS menu (
        id INTEGER PRIMARY KEY,
        item_name TEXT,
        description TEXT,
        price INTEGER,
        photo TEXT
    )
''')
conn.commit()

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
cursor.execute('''INSERT OR IGNORE INTO menu (id, item_name, description, price, photo) 
                VALUES (1, '–†–æ–º–∞–Ω–∑–∞','–°–æ—Ä—Ç "–†–æ–º–∞–Ω–∑–∞" - –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Å–ª–∞–¥–æ—Å—Ç–∏ –∏ —Å–≤–µ–∂–µ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–≥–æ —Å–µ–≥–æ–¥–Ω—è –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º –≤–∫—É—Å–æ–º –ª–µ—Ç–∞!', 10, 'photos/romanza.jpg')''')
cursor.execute('''INSERT OR IGNORE INTO menu (id, item_name, description, price, photo) 
                VALUES (2, '–¢–æ–ø –ì–∞–Ω', '–°–æ—Ä—Ç "–¢–æ–ø –ì–∞–Ω" - –∞—Ä–±—É–∑, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Å—Ç–∞–≤–∏—Ç –≤–∞—Å –≤–ª—é–±–∏—Ç—å—Å—è –≤ –Ω–µ–≥–æ —Å –ø–µ—Ä–≤–æ–≥–æ –∫—É—Å–æ—á–∫–∞. –≠—Ç–æ –∏–¥–µ–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏—â–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ –≤–∫—É—Å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç.', 5, 'photos/top_gan.jpg')''')
cursor.execute('''INSERT OR IGNORE INTO menu (id, item_name, description, price, photo)
                VALUES (3, '–°–µ–º–µ–Ω–∞ f2', '–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—Å–∞—Ç—å', 3, 'photos/–ü–æ–ª–µ.jpg')''')
conn.commit()
conn.close()

# # —É–¥–∞–ª—è–µ–º –±–∞–∑—É
# if os.path.exists('check.db'):
#     os.remove('check.db')

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('check.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã orders
cursor.execute('''CREATE TABLE IF NOT EXISTS orders
                (id INTEGER PRIMARY KEY AUTOINCREMENT,
                 user_id INTEGER,
                 user_name TEXT,
                 item_name TEXT,
                 quantity INTEGER,
                 price INTEGER,
                 name TEXT,
                 phone TEXT,
                 address TEXT,
                 date TEXT,
                 time TEXT)''')

# –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü item_id –≤ —Ç–∞–±–ª–∏—Ü–µ orders
# cursor.execute("ALTER TABLE orders ADD COLUMN item_id INTEGER;")

# –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –≤ —Ç–∞–±–ª–∏—Ü–µ orders
# cursor.execute("ALTER TABLE orders DROP COLUMN referral_id;")
# cursor.execute("ALTER TABLE orders DROP COLUMN referral_source;")


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
cursor.execute('''CREATE TABLE IF NOT EXISTS users
                (user_id INTEGER PRIMARY KEY)''')

conn.commit()

conn = sqlite3.connect('check.db')
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS referrals (
        id INTEGER PRIMARY KEY,
        referrer_id INTEGER NOT NULL,
        referred_id INTEGER NOT NULL,
        order_placed INTEGER DEFAULT 0
    )
""")
conn.commit()
conn.close()

# –ó–∞–¥–∞–µ–º API —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞
bot = Bot(token='')

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Dispatcher –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class OrderInfo(StatesGroup):
    item_name = State()
    quantity = State()
    confirmation = State()
    name = State()
    phone = State()
    address = State()


class OrderState(StatesGroup):
    choosing = State()  # –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    waiting_next_item = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏ –æ –Ω–∞—Å
    keyboard_markup = InlineKeyboardMarkup(row_width=2)
    menu_button = InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu')
    about_button = InlineKeyboardButton('–û –Ω–∞—Å', callback_data='about')
    keyboard_markup.add(menu_button, about_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∫–Ω–æ–ø–∫–∏
    tx_1 = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ó–∞–±–∏—Ä–∞–π –ª—é–±–∏–º—ã–µ –≤–∫—É—Å–Ω—è—à–∫–∏ üçâ –ø–æ –í–´–ì–û–î–ù–û–ô —Ü–µ–Ω–µ –∏ –≤ –û—Ç–ª–∏—á–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ!"
    photo = open('photos/–≠–º–±–ª–µ–º–∞ –ö–§–•.jpg', 'rb')
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.finish()

    await bot.send_photo(message.chat.id, photo, caption=tx_1, reply_markup=keyboard_markup)


@dp.callback_query_handler(lambda c: c.data.startswith('menu'))
async def process_menu_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    page_number = 0
    if 'page_number' in callback_query.data:
        page_number = int(callback_query.data.split('_')[2])
    elif 'prev' in callback_query.data:
        page_number = int(callback_query.data.split('_')[2]) - 1
    elif 'next' in callback_query.data:
        page_number = int(callback_query.data.split('_')[2]) + 1

    await send_menu_page(callback_query.message.chat.id, page_number)


async def send_menu_page(chat_id, page_number):
    items, total_pages = get_items_from_db(page_number)

    if items:
        item = items[0]

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with open(item[4], 'rb') as photo_file:
            image = Image.open(photo_file)

            # –ú–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ –Ω—É–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
            new_size = (800, 600)  # –∑–∞–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
            image.thumbnail(new_size, resample=Image.LANCZOS)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            image_byte_array = io.BytesIO()
            image.save(image_byte_array, format='JPEG')
            image_data = image_byte_array.getvalue()

        message_text = f'{item[1]}\n{item[2]}\n{item[3]} —Ä—É–±.\n\n'
        keyboard_markup = InlineKeyboardMarkup(resize_keyboard=True)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä resize_keyboard=True
        add_to_cart_button = InlineKeyboardButton('üõí', callback_data=f'add_to_cart_{item[0]}')
        prev_button = InlineKeyboardButton('‚óÑ', callback_data=f'menu_prev_{page_number}')
        next_button = InlineKeyboardButton('‚ñ∫', callback_data=f'menu_next_{page_number}')
        keyboard_markup.row(prev_button, add_to_cart_button, next_button)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await bot.send_photo(chat_id, photo=image_data, caption=message_text, reply_markup=keyboard_markup)

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏ –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ callback-–¥–∞–Ω–Ω—ã—Ö
        item_id, quantity, price, total_price = callback_query.data.split('_')[1:]
        item = menu[int(item_id)]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(item_id=item_id, item_name=item[1], quantity=quantity, price=price,
                                total_price=total_price)


def get_items_from_db(page_number):
    with sqlite3.connect('menu.db') as conn:
        cursor = conn.cursor()
        page_size = 1
        offset = page_size * page_number
        limit = page_size

        cursor.execute(f'SELECT * FROM menu LIMIT {limit} OFFSET {offset}')
        items = cursor.fetchall()

        cursor.execute('SELECT COUNT(*) FROM menu')
        items_count = cursor.fetchone()[0]
        total_pages = items_count // page_size + (1 if items_count % page_size > 0 else 0)

        return items, total_pages


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û –Ω–∞—Å"
@dp.callback_query_handler(text='about')
async def process_about_callback(callback_query: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await bot.answer_callback_query(callback_query.id)
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç –æ –Ω–∞—Å –∏–∑ –ø–∞–ø–∫–∏ photos
    photo_path = os.path.join(os.getcwd(), 'photos', '–ö–§–•_—Å–µ–º—å—è.jpg')
    message_text = '–ö–§–• "–ö—Ä–∞—Å–Ω—ã–π –ë–æ—Ä–æ–∫" –±—ã–ª–æ –æ—Å–Ω–æ–≤–∞–Ω–æ –≤ 2017 –≥–æ–¥—É –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–∏ –∞—Ä–±—É–∑–∞. –ú—ã –≥–æ—Ä–¥–∏–º—Å—è —Ç–µ–º, —á—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–¥–Ω–∏ –∏–∑ –ª—É—á—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –ë–µ–ª–∞—Ä—É—Å–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ç—â–∞—Ç–µ–ª—å–Ω–æ–º—É –æ—Ç–±–æ—Ä—É —Å–æ—Ä—Ç–æ–≤ –∏ —Å—Ç—Ä–æ–≥–æ–º—É –∫–æ–Ω—Ç—Ä–æ–ª—é –∫–∞—á–µ—Å—Ç–≤–∞. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π —Å–µ—Ä–≤–∏—Å.'
    await bot.send_photo(callback_query.message.chat.id, photo=InputFile(photo_path), caption=message_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í –∫–æ—Ä–∑–∏–Ω—É"
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('add_to_cart_'))
async def process_add_to_cart_callback(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    item_id = int(callback_query.data.split('_')[-1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(item_id=item_id)

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    message_text = '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:'
    await bot.send_message(callback_query.message.chat.id, message_text)
    await OrderInfo.quantity.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=OrderInfo.quantity)
async def process_quantity_command(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    item_id = data['item_id']
    quantity = int(message.text)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('menu.db')
    cursor = conn.cursor()
    cursor.execute(f'SELECT * FROM menu WHERE id={item_id}')
    item = cursor.fetchone()
    conn.close()

    # –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
    price = item[3] * quantity

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(item_name=item[1], quantity=quantity, price=price)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    message_text = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{item[1]}</b> –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity} —à—Ç.\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.'
    keyboard_markup = InlineKeyboardMarkup()
    continue_button = InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='continue')
    confirm_button = InlineKeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å', callback_data='confirm')
    # cancel_button = InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
    keyboard_markup.add(continue_button, confirm_button)  # cancel_button)
    await message.reply(message_text, reply_markup=keyboard_markup, parse_mode=ParseMode.HTML)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await OrderInfo.next()

    def get_menu_keyboard():
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('menu.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM menu')
        items = cursor.fetchall()
        conn.close()

        keyboard_markup = InlineKeyboardMarkup()
        for item in items:
            item_button = InlineKeyboardButton(f'{item[1]} ({item[3]} —Ä—É–±.)', callback_data=f'item_{item[0]}')
            keyboard_markup.add(item_button)

        return keyboard_markup


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('item_'), state=OrderInfo)
async def process_item_callback(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    item_id = int(callback_query.data.split('_')[-1])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('menu.db')
    cursor = conn.cursor()
    cursor.execute(f'SELECT * FROM menu WHERE id={item_id}')
    item = cursor.fetchone()
    # conn.close()

    # –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    quantity = 1
    price = item[3] * quantity
    data = await state.get_data()
    total_price = data.get('total_price', 0)
    total_price += price

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(
        f"INSERT INTO orders (item_id, item_name, quantity, price) VALUES ({item_id}, '{item[1]}', {quantity}, {price})")
    conn.commit()
    conn.close()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(item_id=item_id, item_name=item[1], quantity=quantity, price=price, total_price=total_price)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    message_text = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{item[1]}</b> –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity} —à—Ç.\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±.'
    keyboard_markup = InlineKeyboardMarkup()
    continue_button = InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='menu')
    confirm_button = InlineKeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å', callback_data='confirm')
    keyboard_markup.add(continue_button, confirm_button)
    await bot.send_message(callback_query.message.chat.id, message_text, reply_markup=keyboard_markup, parse_mode=ParseMode.HTML)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await OrderInfo.next()


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('add_to_cart'), state=OrderState.choosing)
async def process_add_to_cart_callback(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('menu.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM orders')
    rows = cursor.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    items = []
    total_price = 0
    for row in rows:
        item = f"{row[1]} - {row[2]} —à—Ç. - {row[4]} —Ä—É–±."
        items.append(item)
        total_price += row[4]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n" + "\n".join(items) + f"\n\n–ò—Ç–æ–≥–æ: {total_price} —Ä—É–±."
    await bot.send_message(chat_id=callback_query.from_user.id, text=text)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()


async def remove_item_callback(update: Update, context: CallbackContext):
    callback_query = update.callback_query
    item_id = callback_query.data.split("_")[1]

    # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('menu.db')
    cursor = conn.cursor()
    cursor.execute(f"DELETE FROM orders WHERE item_id={item_id}")
    conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT * FROM orders')
    rows = cursor.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    items = []
    total_price = 0
    for row in rows:
        item = f"{row[1]} - {row[2]} —à—Ç. - {row[4]} —Ä—É–±."
        items.append(item)
        total_price += row[4]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await context.bot.send_message(chat_id=callback_query.from_user.id, text=text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n" + "\n".join(items)
    if not items:
        text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
    else:
        text += f"\n\n–ò—Ç–æ–≥–æ: {total_price} —Ä—É–±."
    await context.bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id,
                                text=text)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()


async def checkout_callback(update: Update, context: CallbackContext):
    callback_query = update.callback_query

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('menu.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM orders')
    rows = cursor.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    items = []
    total_price = 0
    for row in rows:
        item = f"{row[1]} - {row[2]} —à—Ç. - {row[4]} —Ä—É–±."
        items.append(item)
        total_price += row[4]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
    text = "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n" + "\n".join(items) + f"\n\n–ò—Ç–æ–≥–æ: {total_price} —Ä—É–±."
    await bot.send_message(chat_id=CHAT_ID, text=text)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await state.reset_data()
    cursor.execute('DELETE FROM orders')
    conn.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
    text = "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id,
                                text=text)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑–∞—Ç—å"
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'confirm', state=OrderInfo)
async def process_confirm_callback(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    item_name = data['item_name']
    quantity = data['quantity']
    price = data['price']

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await OrderInfo.name.set()
    await bot.send_message(callback_query.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=OrderInfo.name)
async def process_name(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(name=message.text)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await OrderInfo.phone.set()
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=OrderInfo.phone)
async def process_phone(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(phone=message.text)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await OrderInfo.address.set()
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å:')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=OrderInfo.address)
async def process_address(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(address=message.text)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    item_name = data['item_name']
    quantity = data['quantity']
    price = data['price']
    name = data['name']
    phone = data['phone']
    address = data['address']

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        now = datetime.now()
        date = now.strftime("%Y-%m-%d")
        time = now.strftime("%H:%M:%S")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('check.db')
        cursor = conn.cursor()
        cursor.execute(
            "INSERT OR IGNORE INTO orders (user_id, user_name, item_name, quantity, price, name, phone, address, date, time) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            (message.from_user.id, message.from_user.username, data.get('item_name'), data.get('quantity'),
             data.get('price'), data.get('name'), data.get('phone'), data.get('address'), date, time))
        conn.commit()
        conn.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
        message_text = f'–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:\n–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ <b>{item_name}</b> –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity} —à—Ç.\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.\n\n–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n–ò–º—è: {name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n–ê–¥—Ä–µ—Å: {address}'
        keyboard_markup1 = InlineKeyboardMarkup()
        discount_button = InlineKeyboardButton('–°–ö–ò–î–ö–ê', callback_data='get_discount')
        keyboard_markup1.add(discount_button)
        await bot.send_message(message.chat.id, message_text, reply_markup=keyboard_markup1, parse_mode=ParseMode.HTML)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
        await state.finish()
    except Exception as e:
        await bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}')
        print('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', e)




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
@dp.message_handler(commands=['menu'])
async def process_menu_command(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM my_table')
    row = cursor.fetchone()
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    cursor.close()
    conn.close()

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    keyboard_markup = InlineKeyboardMarkup(row_width=2)
    for item in items:
        item_button = InlineKeyboardButton(item[1], callback_data=f'show_item_{item[0]}')
        add_to_cart_button = InlineKeyboardButton('üõí', callback_data=f'add_to_cart_{item[0]}')
        keyboard_markup.add(item_button, add_to_cart_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
    message_text = '–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:'
    await message.reply(message_text, reply_markup=keyboard_markup)


@dp.message_handler(commands=['orders'])
async def process_orders_command(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('orders.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM orders')
    orders = cursor.fetchall()
    conn.close()

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
    if orders:
        message_text = '–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:\n\n'
        for order in orders:
            message_text += f'- {order[1]} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {order[2]} —à—Ç. –Ω–∞ —Å—É–º–º—É {order[3]} —Ä—É–±.\n'
    else:
        message_text = '–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç.'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
    await message.reply(message_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler()
async def process_unknown_command(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    message_text = '–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n/menu - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞\n/orders - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤\n/about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å'
    await message.reply(message_text)


@dp.errors_handler()
async def process_errors(update: types.Update, exception: Exception):
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    logger.error(f'Update {update} caused error {exception}')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if update.message is not None:
        message_text = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        await update.message.answer(message_text)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
